#-----------------------------------------------------------------------
# File:        turtlebot3.cfg
#-----------------------------------------------------------------------
# Author: Rameez Wajid
# Date created: 05.15.2023
# Description: 	A configuration file that utilizing th kernel GB_FP to 
#				synthesize a controller for an autonomous vehicle.
#-----------------------------------------------------------------------

# Project data
# -------------------------
# (Project name) is essential. It will be used for names of output files.
# (synthesis_pack) is optional and defines how many synthesis tasks are paked together
#  and its values can be :
#	1- off: meaning one synthesis task at a time
#	2- x%%: where x is positive value between 0 and 99 as percentage of the domain diameter [0% = size 1].
#	3- x  : where x is non zero positive value representing exact number of packed synthesis tasks.
project_name = "vehicle";
synthesis_pack = "off";
online_mode = "true";
online_mode_host = "127.0.0.1";
online_mode_port = "12345";

# Output Memory Model
# -------------------------
# The (data) tells the tool which memory model to use when saving results
# use the values : raw | bits | bitmap | bdd
data = "raw";
save_transitions = "false";
save_controller = "false";

# Code Generation
# -------------------------
# The (implement)  tells the tool which implememtation is used for code generation
# use the values : no | cpp | c | vhdl | verilog
implement = "no";


# Sampling period
# -------------------------
samplingperiod = "2.1";


# State/Input sets
# -------------------------
states{
	dim = "3";
	eta = "0.3,0.3,0.3";
	lb  = "-8.0,-8.0,-3.4";
	ub  = " 8.0, 8.0,3.4";
	err = "0.0,0.0,0.0";
}
inputs{
	dim = "2";
	eta = "0.1,0.1";
	lb  = "-0.25,-0.25";
	ub  = "0.25,0.25";
	err = "0.0,0.0";
}

# System-post dynamics
# -------------------------
# Your post variables should start with (xx) followed by the index of the dimension (starting from 1 not 0).
# Maximum number of dimensions is (states.dim)
# If useode is specified, the ODE solver will be used to solve the dynamics.
# you are allowed to use:
#  - array indexing to access states in x (e.g., x1 as the first state)
#  - array indexing to access inputs in u (e.g., u1 as the first input)
#  - any math function from: https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/mathFunctions.html
post{
	useode = "true";
	xx1 = "u1*cos(x3)";
	xx2 = "u1*sin(x3)";
	xx3 = "u2";
}

# System-growth dynamics
# -------------------------
# Your growth variables should start with (rr) followed by the index of the dimension (starting from 1 not 0).
# Maximum number of dimensions is (states.dim)
# If useode is specified, the ODE solver will be used to solve the dynamics.
# The 'maxposts' limits the iteration over post states in OARS.
# you are allowed to use:
#  - array indexing to access radius in r (e.g., r1 as the first radius)
#  - array indexing to access inputs in u (e.g., u1 as the first input)
#  - any math function from: https://www.khronos.org/registry/OpenCL/sdk/1.0/docs/man/xhtml/mathFunctions.html
growth{
	useode = "false";
	maxposts = "64";
    	rr1 = "r1 + r3*fabs(u1)*0.5";
    	rr2 = "r2 + r3*fabs(u1)*0.5";	
	rr3 = "r3";
}

# Obstacles for specifications
# -----------------------------------------
# Number of obstacles is specified in (count).
# Your obstacles should start with (ob) followed by an index (starting from 1 not 0).
# Each obstacle is a scope and should contain its type and required variables.
# For ob#.type = "rectangle", specify the dimension bounds in (h) as a comma-sepaarated list.
obstacles{
	count="1";	
   	# We use online mode, I put a dummy inverted obstacle  !
	ob1{type="rectangle"; h="{1,-1},{1,-1},{1,-1}";}
	#ob1{type="rectangle"; h="{0.000000,14.956480},{8.311650,11.711650},{-1.400000,1.400000}";}
	#ob2{type="rectangle"; h="{0.000000,28.746380},{5.808890,12.000000},{-1.400000,1.400000}";}
	#ob3{type="rectangle"; h="{0.000000,6.645550},{5.793158,12.000000},{-1.400000,1.400000}";}
	#ob4{type="rectangle"; h="{0.000000,10.240916},{0.000000,6.212302},{-1.400000,1.400000}";}
}

# A target for reach specifications
# -----------------------------------------
# For type = "rectangle", specify the dimension bounds in (h) as a comma-sepaarated list.
target{ 
	count="1";
    	# We use online mode, I put a dummy inverted target  !
	t1{type="rectangle"; h="{1,-1},{1,-1},{1,-1}";}
	#t1{type="rectangle"; h="{95.000000,100.000000},{4.500000,7.500000},{-0.300000,0.300000}";}
}

